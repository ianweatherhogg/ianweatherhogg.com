---
title: Generating a SSL CA signed certificate
description: generating a SSL certificate, signed by Comodo (via NameCheap), with which to configure nginx
tags: ssl signed certificate security nginx namecheap comodo
---

# Problem

There is a plethora of information on how obtain a signed SSL certificate from a Certificate
Authority (CA). The issue I had was getting to grips with the terminology/acronyms used, as well
as some steps/information required by the Certificate Authority (CA).

This post documents my journey down this well trodden path.

# Back Story

This blog is a statically generated site using [Hakyll]. It was formally hosted via
[Github Pages][^GPs] but I recently decided to migrate it to a private `VPS` with [Digital Ocean].
With a price plan at `$5/month`, not only does it allow the hosting of this website but offers other
benefits too:

* back up strategy (via `rsync`)
* private `git` repository hosting
* hands on linux administrative learning experience, server provisioning and configuration
* leveraging Digital Ocean's naming servers in lieu of dedicated DNS hosting (formally I used [DNS Made Easy])
* dedicated IP address
* ...

I have no real need to have secure access. It's more of an educational exercise and because
`entry` level certificates are so cheap it's an option to seriously consider.

My curiosity was first tweaked by trawling through a self signing tutorial for RabbitMQ[^RMQ] but
was then prompted into action by reading [Ben Jeffrey]'s excellent article on obtaining a CA signed
SSL certificate.

# Certificate Purchase Options

[Ben Jeffrey] had opted for [Gandi Single Option] (SSL certificate for a single domain,
currently charging `£11/year`). I was about to do the same when I discovered that [Name Cheap] were
doing the same for half the price ([Name Cheap Compare], `£5.37/$9.00`), which is ultimately
what I went with.

Both Gandi and Name Cheap have many flavours of certificates at varying prices, ([Gandi Compare]
and [Name Cheap Compare] respectively). Four points which occurred to me

1. I originally thought that a single domain would only encompass the root (`ianweatherhogg.com`)
   but having read the [Gandi FAQ], the `www` subdomain (`www.ianweatherhogg.com`) is also included

   > When you generate an SSL certificate for example.com, the CA automatically adds a Subject
   > Alternative Name (SAN) X.509 extension for the www subdomain, which means a certificate
   > for example.com will secure both example.com and www.example.com.

2. If you require multiple subdomains then the `wildcard` option needs to be purchased. I toyed
   with having multiple secure subdomains `git.ianweatherhogg.com`, `tech.ianweatherhogg.com`, etc,
   but the price differential for the `wildcard` option was too much for something which is
   after all an experiment.

3. I toyed with the concept of purchasing a multi domain certificate to encompass the other domains
   I owned under one `umbrella` but by my calculations the price per domain is the same as if
   the single certificate had been purchased for each domain (the disadvantage being, there are
   now more certificates to manage).

4. [Name Cheap] act on behalf of the `real` Certificate Authority who do the certificate signing,
   this being [Comodo] with the [PositiveSSL] certificate I bought.

# Technical Details

I found it easier to look at the end result, namely `nginx` SSL configuration
and then look back at the steps required to get there.

Looking at some `nginx` SSL configuration examples:

[Arg Team]

    ssl_certificate /some/location/sillyfacesociety.com.bundle.crt;
	ssl_certificate_key /some/location/sillyfacesociety.com.key;

[istlsfastyet]

    ssl_certificate /home/istlsfastyet/tls/istlsfastyet.crt;
	ssl_certificate_key /home/istlsfastyet/tls/istlsfastyet.key;

[Ben Jeffrey]

    ssl_certificate     /etc/nginx/ssl/benjeffrey.com.crt;
	ssl_certificate_key /etc/nginx/ssl/benjeffrey.com.key;

## Bundled Certificate and Private Key

A SSL Certificate and Key are both required, to be installed at some configurable location.

The SSL Certificate (Certificate) is the one which has been signed by the third party
Certificate Authority (CA) ([Comodo] in this case)

The SSL Certificate Key (Key) is a password-less (`private`) key generated by yourself

The Certificate is actually a bundle (concatenation) of three certificates

1. one generated by yourself and subsequently signed by the CA
2. the CA's intermediate certificate
3. the CA's root certificate

The certificates generated adhere to the [X509] standard format and both `crt` and `pem`
encodings are acceptable (reflected in the respective filename extensions)

A human readable example of what a certificate contains is described in the excellent
[Mozilla] guide on `Public Key Cryptography `

Note, don't confuse the `.crt` file extension with the `.csr` file extension (see below)
(which if you squint hard enough, look very similar, well they did to me anyway)

## Private Key Generation

These steps are well documented elsewhere, namely [Ben Jeffrey], [Wensheng],
[here](https://launchbylunch.com/posts/2014/Jan/23/blog-tech-stack/) and [Kerry Gallagher]

[Wensheng] stated that the steps should be undertaken as `root`. I don't see why,
and completed them as `user` ...

```bash
openssl genrsa -des3 -out ianweatherhogg.com_encrypted.key 4096
```

1. Whilst the key pair is generated, increase entropy by doing a `find` on the complete
   filesystem. Tip taken from [Sanctum] (in the context of generating GPG keys)

2. Include a pass phrase (and be sure that you'll remember it!)

3. The generated key is the `private` key. Keep it private

4. A 4096 bit key is being generated. [Name Cheap Key] suggests a 2048 bit key
   (along with the [Wensheng] example)

Typical Private Key (`.key`) contents:

    -----BEGIN RSA PRIVATE KEY-----
	Proc-Type: 4,ENCRYPTED
	DEK-Info: DES-EDE3-CBC,1E4CF5287E8373F5

	eONuoQvUsMe0lzqEmasdfasdu&EBbpyyBzGpFEsJ47RRmixalUmJUUqxHFlNaHs1
	... elided ...
	5pP205VpTon4VFL1vaG1QnIv1+OQxJz/G3c+WHZQGM+eTCafiH/zpmL4XtWuQEHG
	-----END RSA PRIVATE KEY-----

## Certificate Signing Request (Public Key)

Generating a Certificate Signing Request (`.csr` file extension) which is sent to
the CA ([Comodo]) via Name Cheap

```bash
openssl req -new -key ianweatherhogg.com_encrypted.key -out ianweatherhogg.com.csr
```

Flow

    Enter pass phrase for ianweatherhogg.com_encrypted.key:
	You are about to be asked to enter information that will be incorporated
	into your certificate request.
	What you are about to enter is what is called a Distinguished Name or a DN.
	There are quite a few fields but you can leave some blank
	For some fields there will be a default value,
	If you enter '.', the field will be left blank.
	Country Name (2 letter code) [AU]:GB
	State or Province Name (full name) [Some-State]:SausageShire
	Locality Name (eg, city) []:ATown
	Organization Name (eg, company) [Internet Widgits Pty Ltd]:Base Metal to Gold Converters Ltd
	Organizational Unit Name (eg, section) []:
	Common Name (e.g. server FQDN or YOUR name) []:ianweatherhogg.com
	Email Address []:xxxxx@ianweatherhogg.com

	Please enter the following 'extra' attributes
	to be sent with your certificate request
	A challenge password []:Look in pass ssl/certificate/challengepassword
	An optional company name []:

1. The passphrase for the `private` key is required
2. The root (FQDN) name `ianweatherhogg.com` is the important part
3. The email included is the `administrator` email (my term, more below),
   i.e. the email address I use most commonly
4. I included a challenge password but read somewhere that it's not required. I've
   had no need for it since
5. I included my (residence) address (I don't think this is really required)

Typical Certificate Signing Request (`.csr`) contents

    -----BEGIN CERTIFICATE REQUEST-----
	MIIE/jCCAuYCAQAwgZcxCzAJBgNVBAYTAkdCMRUwEwYDVQQIDAxMaW5jb2xuc2hp
	... elided ...
	us/Pa9w+mGWmF2re85lSOK5kyhC+wjId0aoixeyPqTyuABw==
	-----END CERTIFICATE REQUEST-----

This is used for submission to [Comodo] via Name Cheap

## Password-less Private Key

As illustrated earlier, a `ssl_certificate_key` is required for successful
`nginx` configuration. The original `private` key generated above would suffice
but has the drawback that the passphrase is required (on `nginx` restart)

To create the password-less `stripped` version;

```bash
openssl rsa -in ianweatherhogg.com_encrypted.key -out ianweatherhogg.com.key
```

Enter the phassphrase when prompted to complete the generation

# Name Cheap and Comodo - Certificate Authority

Having bought your [PositiveSSL] certificate [^BUY] and created an account, navigate
to that certificate from the account and follow the signing process.

You are invited to select a `server` option and paste in your `.csr` file

    Digital Certificate Order Form
 
	PRODUCT INFORMATION
 
	 Certificate Type	  positivessl
	 Purchase Years	  1
 
 
	CERTIFICATE SIGNING REQUEST (REQUIRED)
 
	Select web server <Drop Down List of Server Options>
  
 
	Important: Please use CSR code with 2048-bit private key to activate your SSL certificate.
	According to modern security standards using CSR codes with private key size less than 2048 bits is not allowed.
	Note: If an SSL certificate is being issued for an IDN (Internationalized Domain Name),
	a "common name" field of a CSR must be a punycode of the domain (also known as ASCII compatible encoding, or ACE)
	e.g. xn--aussergewhnliches-7zb.com. Including common name in native characters will result in an error.

	Enter csr

	-----BEGIN CERTIFICATE REQUEST-----
	MIIE/jCCAuYCAQAwgZcxCzAJBgNVBAYTAkdCMRUwEwYDVQQIDAxMaW5jb2xuc2hp
	... elided ...
	us/Pa9w+mGWmF2re85lSOK5kyhC+wjId0aoixeyPqTyuABw==
	-----END CERTIFICATE REQUEST-----

1. The Drop Down List of Server Options includes everyone on the planet bar the one you want, namely `nginx`.
   I chose `Apache 2`, following advice from [Heroku](https://devcenter.heroku.com/articles/ssl-endpoint#submit-csr-to-ssl-provider)

2. Include `-----BEGIN CERTIFICATE REQUEST-----` and `-----END CERTIFICATE REQUEST-----` when you enter the `csr`

## Digital Certificate Order Form (Part 1)

First page of the digital order form


    Digital Certificate Order Form
 
	CSR INFORMATION
 
	Country	GB
	State	SausageShire
	Locality	ATown
	Email	xxxxxxx@ianweatherhogg.com
	Common Name	ianweatherhogg.com
	Organisation  
 
	APPROVER EMAIL
	Domain Related                         Whois Record Type
	[ ] admin@ianweatherhogg.com           [ ] none
	[ ] administrator@ianweatherhogg.com
	[ ] hostmaster@ianweatherhogg.com
	[ ] postmaster@ianweatherhogg.com
	[ ] webmaster@ianweatherhogg.com


1. The `CSR INFORMATION` includes the `administrator` email (my term), the one used for everyday
   correspondence

2. The `APPROVER EMAIL` (`approver` email) includes a selection of address choices, none of which I had.
   The CA ([Comodo]) uses this email to authenticate whether you are the owner of the domain.
   I found it easier to comply by temporarily creating one of the named accounts (my email is serviced
   via google docs and creating a new account is both quick and easy).
   I suspect that you can confer via the online chat facility or refer to [Name Cheap Certificate]
   wiki if you don't have any of the said email accounts

## Digital Certificate Order Form (Part 2)

Second page of the digital order form


    Digital Certificate Order Form
 
	We are unable to validate the settings of the approver email you have chosen
	(xxxxxxxxxx@ianweatherhogg.com). This may be an indication of incorrectly setup MX records,
	invalid mailbox, in-accessible mail server, invalid domain etc.

	We strongly recommend that you fix the issue above before proceeding.
	If you are certain that the above findings are invalid and you still want to proceed,
	please choose the option below.

	[X] I confirm that the above message doesn't apply and the mailbox is setup properly. 

	Or, you can change the approver email address


The `approver` email is being referred to. I verified that it had been set up correctly (by
sending an email to the account). 
Satisfied I accepted the confirmation message and moved on.

## Digital Certification Order Form (Part 3)

Third page of the digital order form

    Digital Certificate Order Form
		PRODUCT INFORMATION
		Certificate Type	 positivessl
		Purchase Years	 1
		Approver Email	 xxxxxxxxx@ianweatherhogg.com


	ENTER CONTACT INFORMATION FOR YOUR SSL CERTIFICATE
	The administrative contact is the primary contact and will be contacted to assist
	in resolution of any questions about the order.

	Administrator Email Address
	xxxxxxxx@ianweatherhogg.com

	E-Mail Address to send the certificate * 

	ADMINISTRATIVE CONTACT	Choose a different address from my profile
	  First Name * Ian
	  Last Name * Weatherhogg
	  Organization Name * etc

	Street Address * 
	  Address 2 etc
	  Job Title etc

	City * etc
	
	State/ Prov.* 
	Zip/ Postal Code * etc

	Country * 

	Phone Number * etc
	Fax Number etc
   
	The fields marked with * are required.

Next Page

## Digital Certification Order Form (Part 4)

Summary

    Digital Certificate Order Process Summary

	Congratulations! You have completed the requirements for SSL certificate order processing.
	To complete the certificate issue process, the certificate request needs to be approved
	by the Approver. In a short while, an email will be sent to xxxxxxxx@ianweatherhogg.com
	which will contain instructions on how to approve the certificate.

* This email is being sent to the `approver` email address

I went away for some breakfast and had a confirmation to my (new but temporary) `approver`
email account. Half an hour, tops.

## Approver Email and Verification Code

In your `approver` email account

    Domain Control Validation for ianweatherhogg.com 

	Dear xxxxxxxxx@ianweatherhogg.com, 

	We have received a request to issue an SSL certificate for ianweatherhogg.com.

    *** Please ignore this email if neither you nor a trusted colleague made this request
	for a certificate ***

	Otherwise, please browse here <A link to Comodo> and enter the following "validation code":

	<A long verification code to cut and paste into the above Comodo link>


## Zip file with Signed Certificate, Root and Intermediate CA Certificates

On successful completion of the above stage, wait a few minutes and an email should arrive
in your `administrator` email account, typically:

    To 'administrator email'

	Your PositiveSSL Certificate for ianweatherhogg.com is attached!

	Dear xxxxxxxxx@ianweatherhogg.com,

	Thank you for placing your order. We are pleased to announce that your PositiveSSL
	Certificate for ianweatherhogg.com has been issued.

	To help reduce domain name mismatch warnings, we have also included the domain name
	www.ianweatherhogg.com in your certificate.

	We strongly recommend that you click here for instructions to ensure that your certificate
	is installed and your webserver is configured correctly.

	Attached to this email you should find a .zip file containing:

	Root CA Certificate - AddTrustExternalCARoot.crt
	Intermediate CA Certificate - PositiveSSLCA2.crt
	Your PositiveSSL Certificate - ianweatherhogg_com.crt
	You can also find your PositiveSSL Certificate for ianweatherhogg.com in text format at
	the bottom of this email.
	Should you have any questions or issues you would like to discuss, please do not hesitate to contact us.

	Kind Regards,

	Comodo Security Services

As stated, unzip the zip file gives

1. Root CA Certificate - AddTrustExternalCARoot.crt
2. Intermediate CA Certificate - PositiveSSLCA2.crt
3. Your PositiveSSL Certificate - ianweatherhogg_com.crt

## Creating a Certificate Bundle

Concatenate the three certificates together

```bash
cat ianweatherhogg_com.crt PositiveSSLCA2.crt AddTrustExternalCARoot.crt > ianweatherhogg.com.crt
```

1. I'm unsure whether order is important here. [Comodo Certificate Hierarchy] is informative on
   this point. This worked for me:

     1.  your-signed.crt
     2.  CA-intermediate-cert.crt
     3.  CA-root-cert.crt

2. I suspected that a `double` filename ending (`.com.crt`) would be problematic. Appears to
   be not an issue.
   
3. Look at the final bundle certificate; it really is just three together (as you would expect
   from a `cat` command)

## Provisioning Nginx on the VPS

As stated at the beginning, the password-less private key and the bundled certificate are
required to configure nginx

Secure Copy (`scp`) the files to the remote server:

```bash
scp -P 12345 ianweatherhogg.com.crt ianweatherhogg.com.key localuser@ianweatherhogg.com:.
```

1. If you are not using the default port of 22 for `ssh` the `-P` flag is required
2. Capitalised `-P`, since uncapitalised `-p` is for `ssh` commands

As `localuser` on the remote host, using `sudo` I placed the key and certificate in the
same location as used by [Ben Jeffrey]

```
/etc/nginx/ssl/ianweatherhogg.com.crt
/etc/nginx/ssl/ianweatherhogg.com.key
```

As sudo

```bash
chown root:www-data ianweatherhogg.com.crt
chown root:www-data ianweatherhogg.com.key
```
Changed privileges for `root` and `group` read only of the above

[Nginx Doc](http://nginx.org/en/docs/http/configuring_https_servers.html)

> The private key is a secure entity and should be stored in a file with restricted access,
> however, it must be readable by nginx’s master process.

```bash
chmod 440 ianweatherhogg.com.crt ianweatherhogg.com.key
```

* `chmod 400` is probably fine too (`root` `rw` access to the key/crt)
* `www-data` is `group` running the `nginx` process

<pre class="terminal">
<span id="prompt">prompt</span> > top

4255 www-data  20   0 89444 3376 1760 S   0.0  0.7   0:04.61 nginx
4256 www-data  20   0 89152 1832  460 S   0.0  0.4   0:04.70 nginx
4257 www-data  20   0 89444 3424 1760 S   0.0  0.7   0:02.68 nginx
4258 www-data  20   0 89152 1832  460 S   0.0  0.4   0:04.65 nginx
4498 root      20   0     0    0    0 S   0.0  0.0   0:00.00 nginx
</pre>

Restart the `nginx` service (as `root`)

# Debug

Well I got to the final stage and found that it didn't work.

Points:

1. I thought I'd restarted `nginx` with the new SSL, `https` configuration,
   but for some reason I hadn't. The previous `http` was still active.
   Ensure you restart the `nginx` service as `root`.
2. I managed to mismatch the brackets in the configuration file
   `/etc/nginx/sites-available/default` so the service was not listening
   on port 443. Use [netcat](https://www.digitalocean.com/community/articles/how-to-use-netcat-to-establish-and-test-tcp-and-udp-connections-on-a-vps) to see if
   a connection can be made on port 443.
   <pre class="terminal">
   <span id="prompt">prompt</span> > netcat -z -v localhost 440-446
   netcat: connect to localhost port 440 (tcp) failed: Connection refused
   netcat: connect to localhost port 441 (tcp) failed: Connection refused
   netcat: connect to localhost port 442 (tcp) failed: Connection refused
   Connection to localhost 443 port [tcp/https] succeeded!
   netcat: connect to localhost port 444 (tcp) failed: Connection refused
   netcat: connect to localhost port 445 (tcp) failed: Connection refused
   netcat: connect to localhost port 446 (tcp) failed: Connection refused
   </pre>
3. If you have a firewall, ensure that port 443 is open

## Warning Shield Unauthenticated Sources

Successful configuration is identified by the green padlock in the browser bar.
However I noticed a `warning shield` on the right hand side of the browser bar,
typically

![Warning Shield](/images/tech/warning-shield-unauthenticated-sources.png)

Looking in the debug console

![Debug Console](/images/tech/warning-shield-unauthenticated-sources-debug-console.png)

Suggests that any libraries referenced over `http` need to now reflect `https` protocol
to remove the `warning shield`.

Interestingly, `google analytics` switches between the appropriate protocol

```javascript
(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
```

<!-- footnotes -->

[^GPs]: `User` github pages and not `Project` github pages as detailed in the [comparison][Github Pages User Project Comparison]
[^RMQ]: `Chapter 11.3` of [RabbitMQ In Action], SSL Connections. Excellent write up on securing RabbitMQ with SSL
[^BUY]: I always opt for `PayPal`. My spending patterns are `UK` based, any purchases `further afield` tend to slam
on a credit card block and I have to fart around unblocking it. I'm looking at you [HSBC](http://www.hsbc.co.uk/1/2/)!

<!-- links -->

[Hakyll]: http://jaspervdj.be/hakyll/
[Github Pages]: https://pages.github.com/
[Github Pages User Project Comparison]:https://help.github.com/articles/user-organization-and-project-pages
[DNS Made Easy]:http://www.dnsmadeeasy.com/
[RabbitMQ In Action]:http://manning.com/videla/
[Ben Jeffrey]:https://benjeffrey.com/posts/setting-up-gandi-ssl-on-nginx
[Gandi Single Option]:https://www.gandi.net/ssl/standard#single
[Gandi Compare]:https://www.gandi.net/ssl/compare
[Gandi FAQ]:http://wiki.gandi.net/en/ssl/faq
[Name Cheap]:https://www.namecheap.com
[Name Cheap Compare]:https://www.namecheap.com/security/ssl-certificates/domain-validation.aspx
[Name Cheap Key]:https://www.namecheap.com/support/knowledgebase/article.aspx/467/67/how-do-i-generate-a-csr-code
[Name Cheap Certificate]:https://www.namecheap.com/support/knowledgebase/troubleshooter.aspx/19/254/14/i-have-not-received-my-ssl-certificate
[PositiveSSL]:https://www.namecheap.com/security/ssl-certificates/comodo/positivessl.aspx
[Arg Team]:http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load/
[istlsfastyet]:https://github.com/igrigorik/istlsfastyet.com/blob/master/nginx.conf
[Comodo]:http://www.comodo.com/
[Comodo Certificate Hierarchy]:https://support.comodo.com/index.php?_m=knowledgebase&_a=viewarticle&kbarticleid=1182
[X509]:http://en.wikipedia.org/wiki/X.509
[Mozilla]:https://developer.mozilla.org/en/docs/Introduction_to_Public-Key_Cryptography
[Wensheng]:http://blog.wensheng.org/2012/03/using-namecheap-ssl-with-nginx.html
[Kerry Gallagher]:https://kerrygallagher.co.uk/how-to-install-a-positivessl-certificate-provided-by-namecheap/
[Sanctum]:http://blog.sanctum.geek.nz/linux-crypto-gnupg-keys/
[Digital Ocean]:https://www.digitalocean.com/
